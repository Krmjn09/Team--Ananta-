version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: log-analyzer-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - log-analyzer-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # ⭐ NEW: Redis Cache ⭐
  redis:
    image: redis:7-alpine
    container_name: log-analyzer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - log-analyzer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: log-analyzer-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/loganalyzer?authSource=admin
      REDIS_URL: redis://redis:6379
      CEREBRAS_API_KEY: ${CEREBRAS_API_KEY}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - log-analyzer-network
    volumes:
      - ./backend/logs:/app/logs

  # Frontend UI
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: log-analyzer-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - log-analyzer-network
    environment:
      REACT_APP_API_URL: http://localhost:5000

  # Sample App (Log Generator)
  sample-app:
    build:
      context: ./sample-app
      dockerfile: Dockerfile
    container_name: log-generator-sample-app
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      LOG_BACKEND_URL: http://backend:5000/api/logs
      BATCH_LOG_URL: http://backend:5000/api/logs/batch
    depends_on:
      - backend
    networks:
      - log-analyzer-network

# Volumes for data persistence
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local

# Network for inter-container communication
networks:
  log-analyzer-network:
    driver: bridge